export interface BaseMessage {
    id: string;
    type: string;
    timestamp: Date;
}
export interface TaskOption {
    key: number;
    title: string;
}
export interface TaskSelectionMessage extends BaseMessage {
    type: "task_selection";
    text: string;
    options: TaskOption[];
}
export interface AiEngineMessage extends BaseMessage {
    type: "ai-engine";
    text: string;
}
export interface AgentMessage extends BaseMessage {
    type: "agent";
    text: string;
}
export interface ConfirmationMessage extends BaseMessage {
    type: "confirmation";
    text: string;
    model: string;
    payload: Record<string, any>;
}
export interface StopMessage extends BaseMessage {
    type: "stop";
}
export type Message = TaskSelectionMessage | AgentMessage | AiEngineMessage | ConfirmationMessage | StopMessage;
export declare const isTaskSelectionMessage: (m: Message) => m is TaskSelectionMessage;
export declare const isAiEngineMessage: (m: Message) => m is AiEngineMessage;
export declare const isAgentMessage: (m: Message) => m is AgentMessage;
export declare const isConfirmationMessage: (m: Message) => m is ConfirmationMessage;
export declare const isStopMessage: (m: Message) => m is StopMessage;
//# sourceMappingURL=messages.d.ts.map