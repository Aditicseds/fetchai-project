import { AgentMessage, ConfirmationMessage, Message, TaskOption, TaskSelectionMessage } from "./types/messages";
import { CustomModel, KnownModelId } from "@fetchai/ai-engine-sdk/types/models";
export * from "./types/messages";
export interface CreditBalance {
    totalCredits: number;
    usedCredits: number;
    availableCredits: number;
}
export interface Model {
    id: string;
    name: string;
    credits: number;
}
export interface FunctionGroup {
    uuid: string;
    name: string;
    isPrivate: boolean;
}
export declare class Session {
    private readonly _apiBaseUrl;
    private readonly _apiKey;
    private _messages;
    private _messageIds;
    readonly sessionId: string;
    readonly functionGroup: string;
    constructor(apiBaseUrl: string, apiKey: string, sessionId: string, functionGroup: string);
    private _submitMessage;
    start(objective: string, context?: string): Promise<void>;
    submitTaskSelection(selection: TaskSelectionMessage, options: TaskOption[]): Promise<void>;
    submitResponse(query: AgentMessage, response: string): Promise<void>;
    submitConfirmation(confirmation: ConfirmationMessage): Promise<void>;
    rejectConfirmation(confirmation: ConfirmationMessage, reason: string): Promise<void>;
    getMessages(): Promise<Message[]>;
    delete(): Promise<void>;
}
export declare class AiEngine {
    private readonly _apiBaseUrl;
    private readonly _apiKey;
    constructor(apiKey: string, options?: {
        apiBaseUrl?: string;
    });
    getFunctionGroups(): Promise<FunctionGroup[]>;
    private getPublicFunctionGroups;
    private getPrivateFunctionGroups;
    getCredits(): Promise<CreditBalance>;
    getModels(): Promise<Model[]>;
    getModelCredits(model: KnownModelId | CustomModel): Promise<number>;
    createSession(functionGroup: string, opts?: {
        email?: string;
        model?: KnownModelId | string;
    }): Promise<Session>;
}
//# sourceMappingURL=index.d.ts.map