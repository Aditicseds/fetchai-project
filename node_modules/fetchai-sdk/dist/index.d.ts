import * as types from "./types/api";
/**
 * Class representing FetchAI for interacting with AgentVerse API.
 *
 * @class FetchAI
 * @see {@link https://agentverse.ai/docs/hosting-api|Fetch Hosting API Documentation}
 */
export declare class FetchAI {
    private token;
    private baseUrl;
    /**
     * Handles API call errors.
     * @param {any} error - The error object.
     * @throws Will throw an error if the API call fails.
     * @private
     */
    private handleError;
    /**
     * Create a new FetchAI instance.
     * @param {string} token - The authentication token.
     * @see {@link https://agentverse.ai/docs/hosting-api#authentication|Authentication}
     */
    constructor(token: types.Token);
    /**
     * Authenticate with a new token.
     * @param {string} token - The new authentication token.
     * @returns {Promise<void>}
     * @see {@link https://agentverse.ai/docs/hosting-api#authentication|Authentication}
     */
    authenticate(token: types.Token): Promise<void>;
    /**
     * Create a new agent.
     * @param {string} name - The name of the agent.
     * @returns {Promise<types.AgentCreateResponse>} - The created agent data.
     * @see {@link https://agentverse.ai/docs/hosting-api#creating-a-new-agent|Creating a new agent}
     */
    createAgent(name: string): Promise<types.AgentCreateResponse>;
    /**
     * Get all agents.
     * @returns {Promise<types.AgentListResponse>} - The list of agents.
     * @see {@link https://agentverse.ai/docs/hosting-api#getting-a-list-of-your-agents|Getting a list of your agents}
     */
    getAgents(): Promise<types.AgentListResponse>;
    /**
     * Get a specific agent by address.
     * @param {string} agentAddress - The address of the agent.
     * @returns {Promise<types.AgentGetResponse>} - The agent data.
     * @see {@link https://agentverse.ai/docs/hosting-api#look-up-specific-agent|Look up specific Agent}
     */
    getAgent(agentAddress: string): Promise<types.AgentGetResponse>;
    /**
     * Delete an agent by address.
     * @param {string} agentAddress - The address of the agent to delete.
     * @returns {Promise<types.AgentDeleteResponse>} - The deletion response.
     * @see {@link https://agentverse.ai/docs/hosting-api#delete-specified-agent|Delete Specified Agent}
     */
    deleteAgent(agentAddress: string): Promise<types.AgentDeleteResponse>;
    /**
     * Start an agent by address.
     * @param {string} agentAddress - The address of the agent to start.
     * @returns {Promise<types.AgentStartResponse>} - The start response.
     * @see {@link https://agentverse.ai/docs/hosting-api#start-a-specific-agent|Start a specific agent}
     */
    startAgent(agentAddress: string): Promise<types.AgentStartResponse>;
    /**
     * Stop an agent by address.
     * @param {string} agentAddress - The address of the agent to stop.
     * @returns {Promise<types.AgentStopResponse>} - The stop response.
     * @see {@link https://agentverse.ai/docs/hosting-api#stop-a-specific-agent|Stop a specific agent}
     */
    stopAgent(agentAddress: string): Promise<types.AgentStopResponse>;
    /**
     * Get the code of an agent by address.
     * @param {string} agentAddress - The address of the agent.
     * @returns {Promise<types.AgentGetCodeResponse>} - The agent code.
     * @see {@link https://agentverse.ai/docs/hosting-api#look-up-agent-code|Look up Agent code}
     */
    getCode(agentAddress: string): Promise<types.AgentGetCodeResponse>;
    /**
     * Update the code of an agent by address.
     * @param {string} agentAddress - The address of the agent.
     * @param {string} code - The new code for the agent.
     * @returns {Promise<types.AgentUpdateCodeResponse>} - The update response.
     * @see {@link https://agentverse.ai/docs/hosting-api#update-agent-code-for-a-specific-agent|Update Agent Code for a specific Agent}
     */
    updateCode(agentAddress: string, code: string): Promise<types.AgentUpdateCodeResponse>;
    /**
     * Get the logs of an agent by address.
     * @param {string} agentAddress - The address of the agent.
     * @returns {Promise<types.AgentGetLatestLogsResponse>} - The agent logs.
     * @see {@link https://agentverse.ai/docs/hosting-api#get-current-agent-usage|Get current Agent usage}
     */
    getLatestAgentLogs(agentAddress: string): Promise<types.AgentGetLatestLogsResponse>;
    /**
     * Delete the logs of an agent by address.
     * @param {string} agentAddress - The address of the agent.
     * @returns {Promise<types.AgentDeleteLogsResponse>} - The deletion response.
     * @see {@link https://agentverse.ai/docs/hosting-api#delete-the-latest-logs-for-an-agent|Delete the latest logs for an Agent}
     */
    deleteAgentLogs(agentAddress: string): Promise<types.AgentDeleteLogsResponse>;
    /**
     * Get the current usage of an agent by address.
     * @param {string} agentAddress - The address of the agent.
     * @returns {Promise<types.AgentGetCurrentUsageResponse>} - The current usage data.
     * @see {@link https://agentverse.ai/docs/hosting-api#get-current-agent-usage|Get current Agent usage}
     */
    getAgentCurrentUsage(agentAddress: string): Promise<types.AgentGetCurrentUsageResponse>;
    /**
     * Transfer code from one agent to another.
     * @param {string} sourceAgentAddress - The address of the source agent.
     * @param {string} targetAgentAddress - The address of the target agent.
     * @returns {Promise<types.AgentTransferCodeResponse>} - The transfer response.
     * @see {@link https://agentverse.ai/docs/hosting-api#transfer-code-between-agents|Transfer code between agents}
     */
    transferAgentCode(sourceAgentAddress: string, targetAgentAddress: string): Promise<types.AgentTransferCodeResponse>;
}
export type { types };
export default FetchAI;
