"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchAI = void 0;
var axios_1 = __importDefault(require("axios"));
/**
 * Class representing FetchAI for interacting with AgentVerse API.
 *
 * @class FetchAI
 * @see {@link https://agentverse.ai/docs/hosting-api|Fetch Hosting API Documentation}
 */
var FetchAI = /** @class */ (function () {
    /**
     * Create a new FetchAI instance.
     * @param {string} token - The authentication token.
     * @see {@link https://agentverse.ai/docs/hosting-api#authentication|Authentication}
     */
    function FetchAI(token) {
        this.token = token;
        this.baseUrl = "https://agentverse.ai/v1";
    }
    /**
     * Handles API call errors.
     * @param {any} error - The error object.
     * @throws Will throw an error if the API call fails.
     * @private
     */
    FetchAI.prototype.handleError = function (error) {
        console.error("API call error:", error.response ? error.response.data : error.message);
        // throw error;
    };
    /**
     * Authenticate with a new token.
     * @param {string} token - The new authentication token.
     * @returns {Promise<void>}
     * @see {@link https://agentverse.ai/docs/hosting-api#authentication|Authentication}
     */
    FetchAI.prototype.authenticate = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.token = token;
                return [2 /*return*/];
            });
        });
    };
    /**
     * Create a new agent.
     * @param {string} name - The name of the agent.
     * @returns {Promise<types.AgentCreateResponse>} - The created agent data.
     * @see {@link https://agentverse.ai/docs/hosting-api#creating-a-new-agent|Creating a new agent}
     */
    FetchAI.prototype.createAgent = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.post("".concat(this.baseUrl, "/hosting/agents"), { name: name }, {
                                headers: { Authorization: "Bearer ".concat(this.token) },
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        error_1 = _a.sent();
                        console.error("Error creating agent:", error_1);
                        throw this.handleError(error_1);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get all agents.
     * @returns {Promise<types.AgentListResponse>} - The list of agents.
     * @see {@link https://agentverse.ai/docs/hosting-api#getting-a-list-of-your-agents|Getting a list of your agents}
     */
    FetchAI.prototype.getAgents = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.get("".concat(this.baseUrl, "/hosting/agents"), {
                                headers: { Authorization: "Bearer ".concat(this.token) },
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        error_2 = _a.sent();
                        console.error("Error fetching agents:", error_2);
                        throw this.handleError(error_2);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get a specific agent by address.
     * @param {string} agentAddress - The address of the agent.
     * @returns {Promise<types.AgentGetResponse>} - The agent data.
     * @see {@link https://agentverse.ai/docs/hosting-api#look-up-specific-agent|Look up specific Agent}
     */
    FetchAI.prototype.getAgent = function (agentAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.get("".concat(this.baseUrl, "/hosting/agents/").concat(agentAddress), {
                                headers: { Authorization: "Bearer ".concat(this.token) },
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        error_3 = _a.sent();
                        console.error("Error getting agent:", error_3);
                        throw this.handleError(error_3);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Delete an agent by address.
     * @param {string} agentAddress - The address of the agent to delete.
     * @returns {Promise<types.AgentDeleteResponse>} - The deletion response.
     * @see {@link https://agentverse.ai/docs/hosting-api#delete-specified-agent|Delete Specified Agent}
     */
    FetchAI.prototype.deleteAgent = function (agentAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.delete("".concat(this.baseUrl, "/hosting/agents/").concat(agentAddress), {
                                headers: { Authorization: "Bearer ".concat(this.token) },
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        error_4 = _a.sent();
                        throw this.handleError(error_4);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Start an agent by address.
     * @param {string} agentAddress - The address of the agent to start.
     * @returns {Promise<types.AgentStartResponse>} - The start response.
     * @see {@link https://agentverse.ai/docs/hosting-api#start-a-specific-agent|Start a specific agent}
     */
    FetchAI.prototype.startAgent = function (agentAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.post("".concat(this.baseUrl, "/hosting/agents/").concat(agentAddress, "/start"), {}, {
                                headers: { Authorization: "Bearer ".concat(this.token) },
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        error_5 = _a.sent();
                        console.error("Error starting agent:", error_5);
                        throw this.handleError(error_5);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Stop an agent by address.
     * @param {string} agentAddress - The address of the agent to stop.
     * @returns {Promise<types.AgentStopResponse>} - The stop response.
     * @see {@link https://agentverse.ai/docs/hosting-api#stop-a-specific-agent|Stop a specific agent}
     */
    FetchAI.prototype.stopAgent = function (agentAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.post("".concat(this.baseUrl, "/hosting/agents/").concat(agentAddress, "/stop"), {}, {
                                headers: { Authorization: "Bearer ".concat(this.token) },
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        error_6 = _a.sent();
                        console.error("Error stopping agent:", error_6);
                        throw this.handleError(error_6);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get the code of an agent by address.
     * @param {string} agentAddress - The address of the agent.
     * @returns {Promise<types.AgentGetCodeResponse>} - The agent code.
     * @see {@link https://agentverse.ai/docs/hosting-api#look-up-agent-code|Look up Agent code}
     */
    FetchAI.prototype.getCode = function (agentAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.get("".concat(this.baseUrl, "/hosting/agents/").concat(agentAddress, "/code"), {
                                headers: { Authorization: "Bearer ".concat(this.token) },
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        error_7 = _a.sent();
                        console.error("Error getting agent code:", error_7);
                        throw this.handleError(error_7);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Update the code of an agent by address.
     * @param {string} agentAddress - The address of the agent.
     * @param {string} code - The new code for the agent.
     * @returns {Promise<types.AgentUpdateCodeResponse>} - The update response.
     * @see {@link https://agentverse.ai/docs/hosting-api#update-agent-code-for-a-specific-agent|Update Agent Code for a specific Agent}
     */
    FetchAI.prototype.updateCode = function (agentAddress, code) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.put("".concat(this.baseUrl, "/hosting/agents/").concat(agentAddress, "/code"), { code: code }, {
                                headers: { Authorization: "Bearer ".concat(this.token) },
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        error_8 = _a.sent();
                        console.error("Error updating agent code:", error_8);
                        throw this.handleError(error_8);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get the logs of an agent by address.
     * @param {string} agentAddress - The address of the agent.
     * @returns {Promise<types.AgentGetLatestLogsResponse>} - The agent logs.
     * @see {@link https://agentverse.ai/docs/hosting-api#get-current-agent-usage|Get current Agent usage}
     */
    FetchAI.prototype.getLatestAgentLogs = function (agentAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.get("".concat(this.baseUrl, "/hosting/agents/").concat(agentAddress, "/logs/latest"), {
                                headers: { Authorization: "Bearer ".concat(this.token) },
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        error_9 = _a.sent();
                        console.error("Error getting agent logs:", error_9);
                        throw this.handleError(error_9);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Delete the logs of an agent by address.
     * @param {string} agentAddress - The address of the agent.
     * @returns {Promise<types.AgentDeleteLogsResponse>} - The deletion response.
     * @see {@link https://agentverse.ai/docs/hosting-api#delete-the-latest-logs-for-an-agent|Delete the latest logs for an Agent}
     */
    FetchAI.prototype.deleteAgentLogs = function (agentAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.delete("".concat(this.baseUrl, "/hosting/agents/").concat(agentAddress, "/logs"), {
                                headers: { Authorization: "Bearer ".concat(this.token) },
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        error_10 = _a.sent();
                        console.error("Error deleting agent logs:", error_10);
                        throw this.handleError(error_10);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get the current usage of an agent by address.
     * @param {string} agentAddress - The address of the agent.
     * @returns {Promise<types.AgentGetCurrentUsageResponse>} - The current usage data.
     * @see {@link https://agentverse.ai/docs/hosting-api#get-current-agent-usage|Get current Agent usage}
     */
    FetchAI.prototype.getAgentCurrentUsage = function (agentAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.get("".concat(this.baseUrl, "/hosting/usage/agents/").concat(agentAddress, "/current"), {
                                headers: { Authorization: "Bearer ".concat(this.token) },
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        error_11 = _a.sent();
                        console.error("Error getting agent current usage:", error_11);
                        throw this.handleError(error_11);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Transfer code from one agent to another.
     * @param {string} sourceAgentAddress - The address of the source agent.
     * @param {string} targetAgentAddress - The address of the target agent.
     * @returns {Promise<types.AgentTransferCodeResponse>} - The transfer response.
     * @see {@link https://agentverse.ai/docs/hosting-api#transfer-code-between-agents|Transfer code between agents}
     */
    FetchAI.prototype.transferAgentCode = function (sourceAgentAddress, targetAgentAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var getCodeResponse, code, putCodeResponse, error_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, axios_1.default.get("".concat(this.baseUrl, "/hosting/agents/").concat(sourceAgentAddress, "/code"), {
                                headers: { Authorization: "Bearer ".concat(this.token) },
                            })];
                    case 1:
                        getCodeResponse = _a.sent();
                        code = getCodeResponse.data.code;
                        return [4 /*yield*/, axios_1.default.put("".concat(this.baseUrl, "/hosting/agents/").concat(targetAgentAddress, "/code"), { code: code }, {
                                headers: { Authorization: "Bearer ".concat(this.token) },
                            })];
                    case 2:
                        putCodeResponse = _a.sent();
                        return [2 /*return*/, putCodeResponse.data];
                    case 3:
                        error_12 = _a.sent();
                        console.error("Error transferring agent code:", error_12);
                        throw this.handleError(error_12);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return FetchAI;
}());
exports.FetchAI = FetchAI;
exports.default = FetchAI;
//# sourceMappingURL=index.js.map